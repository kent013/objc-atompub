Index: Classes/AtompubClient.m
===================================================================
--- Classes/AtompubClient.m	(revision 14456)
+++ Classes/AtompubClient.m	(working copy)
@@ -56,11 +56,11 @@
   credential = aCredential;
 }
 
-- (id)delegate {
+- (NSObject <AtompubClientDelegate> *)delegate {
   return [ [ delegate retain ] autorelease ] ;
 }
 
-- (void)setDelegate:(id)target {
+- (void)setDelegate:(NSObject <AtompubClientDelegate> *)target {
   [ target retain ];
   [ delegate release ];
   delegate = target;
@@ -143,8 +143,7 @@
       }
       //break;
   }
-  connection = [ [ NSURLConnection alloc ] initWithRequest:request
-                                                  delegate:self ];
+
   [ self startConnectionWithRequest:request
                                mode:mode ];
 }
@@ -360,58 +359,58 @@
 
   switch (mode) {
 
-    GettingService:
+  case GettingService:
       NSLog(@"Got service");
       [ self handleResponseWithType:@"application/atomsvc+xml"
                          dispatcher:@selector(clientDidReceiveService:)
                               class:[ AtomService class ] ];
       break;
-    GettingCategories:
+  case GettingCategories:
       NSLog(@"Got categories");
       [ self handleResponseWithType:@"application/atomcat+xml"
                          dispatcher:@selector(clientDidReceiveCategories:)
                               class:[ AtomCategories class ] ];
       break;
-    GettingFeed:
+  case GettingFeed:
       NSLog(@"Got feed");
       [ self handleResponseWithType:@"application/atom+xml;type=feed"
                          dispatcher:@selector(clientDidReceiveFeed:)
                               class:[ AtomFeed class ] ];
       break;
-    GettingEntry:
+  case GettingEntry:
       NSLog(@"Got entry");
       [ self handleResponseForGettingEntry ];
       break;
-    GettingMedia:
+  case GettingMedia:
       NSLog(@"Got media");
       [ self handleResponseForGettingMedia ];
       break;
-    PostingEntry:
+  case PostingEntry:
       NSLog(@"Posted entry");
       [ self handleResponseForPostingResourceWithDispatcher:
         @selector(clientDidCreateEntry:withLocation:) ];
       break;
-    PostingMedia:
+  case PostingMedia:
       NSLog(@"Posted media");
       [ self handleResponseForPostingResourceWithDispatcher:
         @selector(clientDidCreateMediaLinkEntry:withLocation:) ];
       break;
-    PuttingEntry:
+  case PuttingEntry:
       NSLog(@"Putted entry");
       [ self handleResponseForPuttingOrDeletingResourceWithDispatcher:
         @selector(clientDidUpdateEntry) ];
       break;
-    PuttingMedia:
+  case PuttingMedia:
       NSLog(@"Putted media");
       [ self handleResponseForPuttingOrDeletingResourceWithDispatcher:
         @selector(clientDidUpdateMedia) ];
       break;
-    DeletingEntry:
+  case DeletingEntry:
       NSLog(@"Deleted entry");
       [ self handleResponseForPuttingOrDeletingResourceWithDispatcher:
         @selector(clientDidDeleteEntry) ];
       break;
-    DeletingMedia:
+  case DeletingMedia:
       NSLog(@"Deleted media");
       [ self handleResponseForPuttingOrDeletingResourceWithDispatcher:
         @selector(clientDidDeleteMedia) ];
Index: Classes/WSSEUsernameToken.m
===================================================================
--- Classes/WSSEUsernameToken.m	(revision 14456)
+++ Classes/WSSEUsernameToken.m	(working copy)
@@ -22,14 +22,17 @@
     nonce = [ [ NSNumber numberWithDouble:t ] stringValue ];
   }
   [ crypto setClearTextWithString:nonce ];
-  NSString *base64nonce = [ [ crypto clearTextAsData ] encodeBase64WithNewLine:NO ];
+  NSString *base64nonce = [ [ crypto clearTextAsData ] encodeBase64WithNewlines:NO ];
   if (timestamp == nil) {
     timestamp = [ NSDate date ];
   }
-  NSString *created = [ W3CDTF stringFromDate:timestamp ];
+  NSTimeZone* utc = [NSTimeZone timeZoneWithName: @"UTC"];
+  NSString* created = [timestamp descriptionWithCalendarFormat: @"%Y-%m-%dT%H:%M:%SZ"
+                                                      timeZone: utc
+                                                        locale: nil];
   NSString *combined = [ NSString stringWithFormat:@"%@%@%@", nonce, created, password ];
   [ crypto setClearTextWithString:combined ];
-  NSString *passwordDigest = [ [crypto digest:@"SHA-1" ] encodeBase64WithNewLine:NO ];
+  NSString *passwordDigest = [ [crypto digest:@"SHA1" ] encodeBase64WithNewlines:NO ];
   [ crypto release ];
   return [ NSString stringWithFormat:@"UsernameToken Username=\"%@\", PasswordDigest=\"%@\", Nonce=\"%@\", Created=\"%@\"",
     username, passwordDigest, base64nonce, created ];

